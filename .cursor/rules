# Cursor Rules for Business with AI Project

## 개발 환경 규칙
- **파이썬 환경**: `uv` + `pyproject.toml` + `uv.lock` 기반 가상환경 사용
- **서비스 환경**: Linux/Docker + docker-compose 기반 환경 구성
- **서비스 구조**: `services/` 내 디렉토리들이 MSA 서비스별 루트 디렉토리
- **CLI 래퍼**: `pk_ensure` 접두사로 시작하는 파일들은 CLI 모드 실행 시 래퍼 파일
- **크로스 플랫폼**: Windows, WSL, Linux 환경 모두 지원

## 자동 실행 규칙
- **터미널 도구**: `시스템 터미널` 안되면 `커서 내장 터미널` 이나 다른터미널 사용, 안되면 반대순서로도 시도
- **커서 내장 터미널**: 명령어응답이 안오면 `bash -c`, `zsh -c 방식` 으로도 시도, 안되면 반대순서로도 시도
- **터미널 재실행**: 그래도 안되면, Cursor 터미널 재실행
- **플랫폼 감지**: Windows에서는 PowerShell, WSL/Linux에서는 bash/zsh 자동 선택

## 크로스 플랫폼 규칙
- **가상환경 경로**: 
  - Windows: `.venv_windows\Scripts\Activate.ps1`
  - WSL/Linux: `.venv_linux\bin\activate`
- **경로 구분자**: 
  - Windows: `\` (백슬래시)
  - WSL/Linux: `/` (슬래시)
  - Python Path 객체 사용으로 자동 처리
- **명령어 호환성**:
  - Windows: `docker compose` (PowerShell)
  - WSL/Linux: `docker-compose` 또는 `docker compose`
- **환경 변수**: `$env:` (Windows) vs `export` (WSL/Linux) 자동 감지

## 파일 및 디렉토리 관리 규칙
- **문서 관리**: `services/`의 docs는 `docs/README_{MSA_service_name}.md` 형태로 분리 관리
- **레거시 파일**: `deprecated`된 기존 버전 파이썬 파일에는 `# ` 접두사를 붙여서 rename
- **크로스 플랫폼 경로**: 상대 경로 사용 시 현재 작업 디렉토리 기준으로 계산

## 코드 작성 규칙
- **다국어 지원**: 모든 프로그램은 다국어 지원 가능하도록 작성 (PkMessage2025 객체 적극 활용)
- **이모지 제외**: 코드 작성 시 이모지 사용 금지
- **함수명 규칙**: 함수명은 `ensure_` 접두사로 시작
- **파일명 규칙**: `.py`, `.sh`, `.cmd`, `.bat`, `.ps1` 확장자 파일들은 `ensure_` 접두사로 시작
- **플랫폼 감지**: `platform.system()`, `os.name` 등으로 OS별 분기 처리

## 테스트 코드 규칙
- **테스트 파일**: `test_` 접두사를 붙여 명시적으로 작성
- **테스트 위치**: `tests` 폴더에서 작성
- **크로스 플랫폼 테스트**: Windows, WSL, Linux 환경에서 모두 실행 가능하도록 작성
- **가상환경 분기**: OS별 가상환경 자동 선택 및 활성화

### 로그인 루틴 실행/시각화 규칙
- **기본 테스트 파일**: `services/hospital_workers/tests/test_login_routine_via_selenium_at_windows.py`
- **기본 실행 식**: 로그인 루틴은 다음 테스트로 구성한다
  - `test_page_load_and_title`, `test_login_form_structure`, `test_form_interaction`, `test_browser_functionality`
- **Linux(WSL) 기본 모드**: Headless 모드로 실행되어 창이 뜨지 않는다. 창 표시가 필요하면 Windows 환경에서 실행하거나 headless 옵션을 해제한다.
- **Windows 전용 원칙**: 로그인 루틴 테스트는 반드시 Windows 환경에서 실행한다. (WSL/Linux에서는 실패 처리 또는 Windows Python(.venv_windows) 프록시 실행을 사용할 수 있다.)
- **프론트엔드 경로**: 로그인 폼은 현재 `/` 경로에서 렌더링한다. 테스트는 `http://localhost:5173/`를 대상으로 한다.
- **포트 매핑 주의**: `servers/docker-compose.dev.yml`의 `page-server` 포트는 `5173:5173`으로 설정한다. (Next.js dev 서버가 5173에서 리스닝)
- **모의 페이지 사용 금지**: 로그인 루틴 테스트에서 `data:` URL 등 모의 HTML 로딩을 금지한다. 프론트엔드(5173)가 꺼져 있으면 테스트는 반드시 실패해야 한다.
- **리포트/뷰어 자동화**: 스크립트 `services/hospital_workers/scripts/ensure_login_routine_and_open.py`를 사용해
  - HTML 리포트 생성: `logs/login_report.html`
  - 스크린샷 뷰어 생성: `logs/login_screenshots.html`
  - 실행 후 뷰어 자동 오픈 시도(WSL/Windows/Linux 순)

#### 뷰어 자동 열기 정책
- **WSL**: `explorer.exe`(Windows 경로 변환 후) → `wslview` → `xdg-open` 순으로 시도한다.
- **Windows 네이티브**: `os.startfile`로 연다.
- **Linux 순정 환경**: `xdg-open`을 우선 시도한다.
- **열기 실패 시 안내**: WSL 경로와 변환된 Windows 경로를 함께 출력해 수동 열기를 돕는다.

### 로그인 루틴 상세 테스트 루틴
- **목적**: 프론트엔드 로그인 화면의 로드/구조/입력/브라우저 동작을 Chrome으로 검증한다.
- **운영체제 강제**: 반드시 Windows에서 실행. 비-Windows(OS=WSL/Linux 등)에서는 테스트가 실패하도록 구성되어 있다.
- **브라우저**: Google Chrome + Selenium(WebDriver Manager로 드라이버 자동 관리)
- **Chrome 유지**: 테스트 종료 후에도 창을 닫지 않도록 `Options().add_experimental_option("detach", True)`를 사용한다. 수동으로 창을 닫는다.
- **필수 선행 조건**:
  - 프론트엔드 `page-server`가 `http://localhost:5173/`에서 동작해야 한다.
  - `servers/docker-compose.dev.yml`의 포트 매핑은 `5173:5173`이어야 한다.
  - DB(5432)가 이미 사용 중이면, 로그인 화면 테스트만을 위해 `page-server`만 단독 기동해도 된다.
    - 예: `docker compose -f services/hospital_workers/servers/docker-compose.dev.yml up -d page-server`
- **테스트 대상 URL**: `http://localhost:5173/` (루트에서 로그인 폼 렌더링)
- **모의 페이지 금지**: `data:` URL 등 모의 HTML 로딩을 금지. 프론트엔드 미가동 시 테스트는 실패해야 한다.
- **포함 테스트**:
  - `test_page_load_and_title`
  - `test_login_form_structure`
  - `test_form_interaction`
  - `test_browser_functionality`
  - `test_login_with_valid_credentials` (foo@foo / foo로 실제 제출까지 검증)
- **제외 테스트**:
  - `test_comprehensive_validation`은 브라우저 무한 유지 로직이 있어 기본 실행에서 제외한다.
- **산출물(Windows)**:
  - HTML 리포트: `services/hospital_workers/logs/login_report_windows.html`
  - 스크린샷: `services/hospital_workers/tests/results/*.png`
- **실행 방법(Windows)**:
  - 스크립트: `services\hospital_workers\scripts\run_login_routine_windows.cmd`
  - 직접 실행(동일 효과):
    - 가상환경: `services\hospital_workers\.venv_windows\Scripts\python.exe`
    - 명령: `... -m pytest tests\test_login_routine_via_selenium_at_windows.py -k "test_page_load_and_title or test_login_form_structure or test_form_interaction or test_browser_functionality" -v -s --html logs\login_report_windows.html --self-contained-html`
- **비-Windows 환경(WSL/Linux)**:
  - 정책상 로그인 루틴은 실패 처리된다. 시각화/리포트 자동화 스크립트(`ensure_login_routine_and_open.py`)는 존재하나, 로그인 루틴 규칙에는 Windows만 허용한다.

### 로그인 루틴 인프라 규칙(Dev stack)
- **Nginx 리버스 프록시**: 설정 파일은 `servers/page_server/nginx/nginx.conf`를 컨테이너 `/etc/nginx/nginx.conf`로 마운트한다.
- **포트 매핑(호스트)**:
  - DB(PostgreSQL): `15432 -> 5432`
  - Redis: `16379 -> 6379`
  - API 서버: 호스트 포트 직접 바인딩하지 않음. Nginx를 통해 접근.
  - Page server(Next.js dev): `5173 -> 5173`
- **헬스체크**:
  - API via Nginx: `GET http://localhost/api/health` → 200 OK
- **API 경로 규칙**:
  - 프론트엔드에서는 `http://localhost/api` 프리픽스로 접근 (예: `/auth/login`, `/auth/create-test-account`).
- **API 코드 임포트 규칙**:
  - `api_server/src` 내부 모듈 임포트는 항상 상대 임포트 사용: `from .database import ...`, `from .models import ...`

## 경로 처리 규칙
- **Path 객체 활용**: 파이썬에서 파일 및 디렉토리 경로 처리 시 Path 객체 사용
- **레거시 변환**: str path 사용 시 Path 객체로 변환 (예: `D_PKG_WINDOWS` → `Path(D_PKG_WINDOWS)`)
- **경로 유틸리티**: `pkg_py/system_object/files.py`, `pkg_py/system_object/directories.py` 활용
- **크로스 플랫폼 경로**: `pathlib.Path` 사용으로 OS별 경로 구분자 자동 처리
- **상대 경로 계산**: 프로젝트 루트 기준으로 상대 경로 정확히 계산

## 코드 구조 규칙
- **클래스 작성**: `pkg_py/system_object`에 작성
- **함수 작성**: `pkg_py/function_split`에 작성
- **래퍼 패턴**: pkg_py에 래퍼 작성 시 주변 래퍼의 패턴을 비교하여 재생성
- **플랫폼별 분기**: OS별 기능 차이를 고려한 분기 처리

## 보안 규칙
- **민감정보 경고**: 비밀번호, API 키 등 민감한 개인정보가 포함된 컨텐츠에 대해 경고 요청
- **크로스 플랫폼 보안**: Windows, WSL, Linux 환경별 보안 정책 고려

## 세부 요청 유형
- **코드 리뷰 및 개선**: 기존 코드의 품질 향상 및 최적화
- **버그 해결**: 발생한 문제점의 원인 분석 및 해결 방안
- **아이디어 브레인스토밍**: 새로운 기능이나 개선 방안에 대한 아이디어 논의
- **콘텐츠 작성 보조**: 문서나 설명서 작성에 대한 도움
- **창작 방향 설정**: 프로젝트의 방향성이나 구조에 대한 가이드
- **개념 설명 요청**: 특정 기술이나 개념에 대한 이해 도움
- **자료 정리 및 요약**: 복잡한 정보의 정리 및 핵심 요약
- **연구 방향 설정**: 기술 조사나 연구 주제 설정에 대한 가이드

## Cursor 특화 규칙
- **AI 어시스턴트**: 사용자의 요청에 따라 적절한 도구를 선택하여 작업 수행
- **코드 생성**: 프로젝트 규칙을 준수하여 일관성 있는 코드 생성
- **파일 관리**: 파일 생성, 수정, 삭제 시 프로젝트 구조를 고려
- **터미널 명령**: 적절한 터미널 명령어를 제안하고 실행
- **에러 처리**: 발생한 문제에 대한 명확한 설명과 해결 방안 제시
- **플랫폼 자동 감지**: Windows, WSL, Linux 환경을 자동으로 감지하여 적절한 명령어 선택
- **크로스 플랫폼 테스트**: 모든 플랫폼에서 테스트가 정상 작동하도록 보장

### 운영 팁
- **DB 포트 충돌**: 로컬 5432가 점유 중이면 `page-server`만 단독으로 올려 테스트를 진행할 수 있다.
- **브라우저 무한 대기 회피**: `test_comprehensive_validation`은 브라우저 유지 로직이 있어 기본 실행 대상에서 제외한다.

## 커뮤니케이션 규칙
- **기본 언어는 한국어**: 사용자에게 제공하는 모든 설명, 요약, 상태 업데이트는 기본적으로 한국어로 작성한다.
- **영문 용어 병기**: 기술 용어는 필요 시 영어를 괄호로 병기한다. 예: 가상환경(virtual environment), 세션 토큰(session token)
- **로그/오류 원문 유지**: 시스템 로그나 외부 도구의 오류 메시지는 원문을 유지하되, 한국어로 요약을 함께 제공한다.
